" rt-labs indentation rules:
:set tabstop=3 shiftwidth=3 softtabstop=3 expandtab

" Colorscheme
:colorscheme gruvbox
let g:gruvbox_contrast_dark= '(medium)'
:set background=dark
:set guifont=Consolas\ 10

" Window settings
:set number ruler
:set colorcolumn=80
:set cursorline

" Pane resizing using arrows:
nnoremap <silent> <Up>    :call animate#window_delta_height(-10)<CR>
nnoremap <silent> <Down>  :call animate#window_delta_height(10)<CR>
nnoremap <silent> <Left>  :call animate#window_delta_width(-10)<CR>
nnoremap <silent> <Right> :call animate#window_delta_width(10)<CR>

" Maximize window in gVim:
if has("gui_running")
   :set lines=80 columns=1000
endif

" Syntax
:syntax on

" ctags tags file:
set tags=tags;/

" Enable filetype specific indentation. (Add e.g. py.vim for indentation for
" .py files.)
filetype plugin indent on

" No italic on comments:
:hi Comment gui=NONE
":hi Comment term=NONE

" Save file using specified line endings:
:command Sd silent! %s/\s\+$// | w ++ff=dos
:command Sm silent! %s/\s\+$// | w ++ff=mac
:command Su silent! %s/\s\+$// | w ++ff=unix

" Custom save command
" silent!: Suppress output of following command
" %s/\s\+$//: find and replace any trailing whitespaces
" |: perform another command
" w: save
:command W silent! %s/\s\+$// | w
:command Wq silent! %s/\s\+$// | wq
:command WQ Wq


" Some useful macros I don't want overwritten:
" Automatically fold all top level braces:
let @f='/^{$V%zf@f'

" Autofill numbers. By default fills 0, 1, 2 etc. Change start value i and
" formula in @i on the fly for custom fills. Replaces any occurences of
" the character 'Î±' from cursor and down. This can be changed by just
" replacing the single character 'Î±' in the macros below to anything else
" Decimal:
let @n='/Î±s=i@i@n'
" Hexadecimal:
let @h='/Î±s=printf("0x%02X", i)@i@h'
let i=0 "default start value for autofill
let j=1 "default increment for autofill

" by default increment by j. This macro can be changed on the fly for othe
" autofill formulas to apply:
let @i=':let i+=j' "default formula for autofill. Change i macro if you want

" Add braces to oneliner:
let @b='I{o}'

" Evaluate an expression and append the answer after the equal sign.
" Will evaluate selection from cursor up to '=' and append answer after '='.
let @e='vt=yf=a ="'

" Evaluate marked expression and replace it with answer:
let @r='s="'


" Open this file:
:command V sp | e $MYVIMRC
" Apply this file:
:command S source $MYVIMRC

" Search settings:
:set incsearch
:set hlsearch
:set ignorecase
" Turn off wrap-around searches (makes recursive macros safer):
:set nowrapscan


" <Ctrl-l> redraws the screen and removes any search highlighting.
nnoremap <silent> <C-l> :nohl<CR><C-l>

" Terminal colors:
":set termguicolors

" Highlight trailing whitespace:
:highlight ExtraWhitespace ctermbg=red guibg=red

" Make sure highlights are loaded with each window:
" source: https://vi.stackexchange.com/questions/7292/highlighting-with-match-\
" does-not-appear-in-all-buffers
augroup custom_highlighting
    autocmd!
    autocmd VimEnter,WinEnter * match ExtraWhitespace /\s\+$/
    " Some trial-and-error with wrapping:
    autocmd VimEnter,WinEnter * set nowrap
augroup END


" fugitive options:
set diffopt+=vertical


" Install vim-plug if not found:
if empty(glob('~/.vim/autoload/plug.vim'))
   silent !curl -fLo ~/.vim/autoload/plug.vim --create-dirs
         \ https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
   autocmd VimEnter * PlugInstall --sync | source $MYVIMRC
endif

" Run PlugInstall if there are missing plugins
autocmd VimEnter * if len(filter(values(g:plugs), '!isdirectory(v:val.dir)'))
  \| PlugInstall --sync | source $MYVIMRC
\| endif

" Load plugins:
call plug#begin()
Plug 'camspiers/animate.vim'
"Plug 'tpope/vim-fugitive.vim'
Plug 'will133/vim-dirdiff'
if !&diff
   Plug 'camspiers/lens.vim'
endif
call plug#end()


" Custom functions:
" Get powers as ints:
function Pow(base, pow)
  return float2nr(pow(a:base, a:pow))
endfunction

" binary left shift:
function Lsh(v, sh)
   let k = 0
   let val = a:v
   while k < a:sh
      let val *= 2
      let k += 1
   endw
   return val
endfunction

" binary right shift:
function Rsh(v, sh)
   let k = 0
   let val = a:v
   while k < a:sh
      let val /= 2
      let val = float2nr(val)
      let k += 1
   endw
   return val
endfunction

" convert number to binary:
function Bin(n)
   let val = a:n
   let c = ''
   while val > 0
      let c = string(val % 2) . c
      if ((len (c) + 1) % 5 == 0) && (val > 0)
         let c = ' '. c
      endif
      let val = Rsh(val, 1)
   endwhile
   if c[0] == ' '
      let c = c[1:]
   endif
   while (len(c) + 1) % 5 != 0
      let c = '0' . c
   endwhile
   return c
endfunction

" Convert to hex:
function Hex(n)
   return printf("0x%X", a:n)
endfunction

" Convert to dec:
function Dec(n)
   return printf("%d", a:n)
endfunction

